{"name":"Clicksign","tagline":"Rest API","body":"# Índice\r\n\r\n- [Introdução](#introducao)\r\n- [Funcionamento geral](#funcionamento-geral)\r\n- [Autenticação](#autenticacao)\r\n- [Versão](#versao)\r\n- [Formatos](#formatos)\r\n- [Listagem de documentos](#listagem-de-documentos)\r\n- [Visualizacão de Documento](#visualizacao-de-documento)\r\n- [Upload de documentos](#upload-de-documentos)\r\n- [Criação de lista de assinatura](#criacao-de-lista-de-assinatura)\r\n- [Hooks](#hooks)\r\n- [Exemplos](#exemplos)\r\n\r\n# <a name=\"introducao\"></a>Introdução\r\n\r\nA Clicksign é uma solução online para enviar, guardar e assinar documentos, com validade jurídica. Foi criada para facilitar, reduzir custo e aumentar a segurança e compliance do processo de assinatura e _workflow_ de documentos. \r\n\r\nA Clicksign pode ser acessada em https://desk.clicksign.com. \r\n\r\nO propósito desta **REST API** é prover meios para que nossos clientes adequem a Clicksign aos seus processos e sistemas p. ex. automatizar tarefas, desenhar fluxos de assinatura, e definir _workflow_. \r\n\r\nQualquer linguagem de programação compativel com requisições **HTTP / JSON** cumpre os requisitos necessários para consumir os serviços desta API. Assim, com pouco esforço de programação é possível integrar desde scripts shell até sistemas de ERP.\r\n\r\n# <a name=\"funcionamento-geral\"></a>Funcionamento geral\r\n\r\nUma _REST API_ é composta, basicamente, por dois elementos: um **cliente** e um **servidor**. O cliente sempre inicia a comunicação mediante requisição HTTP. O servidor sempre finaliza a comunicação respondendo à requisição.\r\n\r\n<p align=\"center\">\r\n  <img src=\"https://raw.github.com/clicksign/rest-api-v2/master/images/client-server.png\" />\r\n</p>\r\n\r\nAs mensagens HTTP são compostas por uma linha inicial, um conjunto de cabeçalhos e um corpo. A linha inicial difere nas requisições e nas respostas, o cabeçalho compartilha parâmetros em comum e parâmetros específicos, e o corpo é completamente dependente de cada mensagem, podendo até ser nulo.\r\n\r\nA requisição, em sua linha inicial, indica o **método**, o **caminho**, e a **versão do protocolo**. O método e o caminho são essenciais em uma _REST API_ uma vez que ambos indicam a ação a ser executada no servidor.\r\n\r\nA resposta, em sua linha inicial, indica a **versão do protocolo**, o **status**, e contém uma **mensagem informativa**. O código de status é essencial para o cliente saber se a ação foi devidamente executada no servidor.\r\n\r\nA documentação de cada função da API determina o método e o caminho a ser utilizado, e o significado do corpo e de cada status da resposta.\r\n\r\n**Atenção:** Toda a comunição cliente/servidor é feita através de HTTP sobre SSL/TLS (HTTPS). Requisições em HTTP simples resultam em redirecionamentos (301) para o protocolo HTTPS.\r\n\r\nTodas as requisições da _REST API_ são feitas para `api.clicksign.com`.\r\n\r\n## Exemplo de requisição\r\n\r\n```http\r\nGET /documents HTTPS/1.1\r\nHost: api.clicksign.com\r\nAccept: application/json\r\n```\r\n\r\n- Método: GET\r\n- Caminho: /documents\r\n- Versão: 1.1\r\n- Cabeçalhos: Host, Accept\r\n- Corpo: vazio\r\n\r\n## Exemplo de resposta\r\n\r\n```http\r\nHTTP/1.1 200 OK\r\nContent-Type:application/json\r\nConnection: Keep-Alive\r\n```\r\n\r\n```json\r\n[\r\n  {\r\n    \"id\": \"abcd...\"\r\n  },\r\n\r\n  {\r\n    \"id\": \"...\"\r\n  }\r\n]\r\n```\r\n\r\n- Versão: 1.1\r\n- Status: 200\r\n- Mensagem: OK\r\n- Cabeçalhos: Content-Type, Connection\r\n- Corpo: [{...\r\n\r\n\r\n# <a name=\"autenticacao\"></a>Autenticação\r\n\r\nA Clicksign utiliza duplo fator de autenticação para aumentar a segurança de suas transações. Autenticações que utilizam duplo fator geralmente são baseadas em algo que o cliente _conhece_ e algo que o cliente _possui_. No caso da API os fatores são:\r\n\r\n1. Conhecer uma _string_ de **identificação**\r\n1. Possuir um endereço **IP** específico\r\n\r\nA autenticação é feito através do parâmetro **access_token** que automaticamente determina um usuário e realiza sua autenticação. O parâmetro deve ser enviado no **caminho** da requisição. Portanto, toda requisição deverá conter no _path_ `?access_token=string-do-token`._\r\n\r\n**Atenção:** O parâmetro de autenticação deve ser enviado a cada requisição feita pelo cliente. Como esse parâmetro é comum a todas as funções da API, ele será omitido das documentações.\r\n\r\nO segundo fator da autenticação é realizado automaticamente pelo servidor da Clicksign, que verifica se o **IP** de origem da requisição está dentro de uma lista de endereços previamente cadastrados para determinado cliente. Este fator de autenticação é **opcional**.\r\n\r\n\r\n# <a name=\"versao\"></a>Versão da API\r\n\r\nPara possibilitar a expansão contínua da API, a Clicksign implementa um sistema\r\nde versões. Dessa forma é necessário que a requisição contenha qual versão da\r\nAPI está sendo utilizada. Isto **é feito através do path** da requisição.\r\n\r\nA Clicksign manterá, além da versão atual, a versão anterior da sua API em\r\nfuncionamento. Quando uma nova versão é lançada, a versão anterior deixa de ser\r\nsuportada, p.e.: supondo que a versão atual seja 4, a versão 3 também será\r\nsuportada, no lançamento da versão 5, as versões suportadas serão 5 e 4 e a\r\nversão 3 deixará de ser suportada.\r\n\r\nUm nova versão é lançada **apenas quando há quebra de funcionalidade**. Ou seja,\r\nmelhorias, novas funcionalidades e correções de _bugs_, desde que não alterem o\r\ncomportamento esperado, não implicam no lançamento de uma nova versão.\r\n\r\nAs melhorias, noas funcionalidades e correções, assim como o lançamento de novas\r\nversões da API, serão comunicados através de e-mail para todos os usuários que\r\npossuem chave da API configurada nos ambientes de _production_ e _demo_.\r\n\r\n# <a name=\"formatos\"></a> Formatos\r\n\r\nA API da Clicksign atualmente aceita dois formatos distintos como formato de\r\n*resposta* da requisição, sendo eles: `JSON` e `XML`. O formato deve ser\r\npassado através do `HTTP HEADER` `Accept` seguido do **mime type** referente ao\r\nformato. Por exemplo, para que o formato de sua resposta seja em `JSON`, será\r\nnecessário prover um header com o seguinte formato:\r\n\r\n```\r\nAccept: application/json\r\n```\r\n\r\nCaso deseje receber o formato da resposta em `XML` basta passar dessa forma:\r\n\r\n```\r\nAccept: application/xml\r\n```\r\n\r\nNos exemplos restantes dessa documentação o formato da resposta serão mostrados\r\nem JSON, porém todos os exemplos também podem ter as respostas no formato `XML`.\r\n\r\n# <a name=\"listagem-de-documentos\"></a>Listagem de documentos\r\n\r\nVocê pode obter uma listagem de todos os documentos da conta além de informações extras pertinentes ao andamento da lista de assinatura. A listagem retornarár todos os documentos na conta, sem a necessidade de parâmetros de paginação ou busca.\r\n\r\n* **Method:** GET\r\n* **Path:** /v1/documents\r\n  - **Accept**: application/json\r\n\r\n## Exemplo de resposta\r\n\r\n```http\r\nHTTP/1.1 200 OK\r\nContent-Type:application/json\r\nConnection: Keep-Alive\r\n```\r\n\r\n```json\r\n[\r\n  {\r\n    \"document\": {\r\n      \"key\": \"1123-4567-89ab-cdef\",\r\n      original_name: \"document-2.pdf\"\r\n      \"status\": \"completed\",\r\n      \"archive_id\": 2,\r\n      \"created_at\": \"2014-06-18T09:55:16.873-03:00\",\r\n      \"updated_at\": \"2014-06-18T10:02:03.056-03:00\",\r\n      \"user_key\":\"A0BF-848B-0A42-916C\",\r\n      \"list\": {\r\n        \"locked\":null,\r\n        \"started_at\":null,\r\n        \"created_at\":\"2014-06-18T09:57:14.434-03:00\",\r\n        \"updated_at\":\"2014-06-18T09:57:14.434-03:00\",\r\n        \"user_key\":\"A0BF-848B-0A42-916C\",\r\n        \"signatures\": []\r\n      }\r\n    }\r\n  },\r\n  {\r\n    \"document\": {\r\n      \"key\": \"0123-4567-89ab-cdef\",\r\n      original_name: \"document-1.pdf\"\r\n      \"status\": \"completed\",\r\n      \"archive_id\": 1,\r\n      \"created_at\": \"2014-06-18T09:55:16.873-03:00\",\r\n      \"updated_at\": \"2014-06-18T10:02:03.056-03:00\",\r\n      \"user_key\":\"A0BF-848B-0A42-916C\",\r\n      \"list\": {\r\n        \"locked\":null,\r\n        \"started_at\":\"2014-06-18T09:58:46.450-03:00\",\r\n        \"created_at\":\"2014-06-18T09:57:14.434-03:00\",\r\n        \"updated_at\":\"2014-06-18T09:58:46.452-03:00\",\r\n        \"user_key\":\"A0BF-848B-0A42-916C\",\r\n        \"signatures\": [\r\n          {\r\n            \"display_name\":\"Daniel Gaboardi Libanori\",\r\n            \"title\":null,\r\n            \"company_name\":null,\r\n            \"key\":\"A0BF-848B-0A42-916C\",\r\n            \"act\":\"receipt\",\r\n            \"decision\":\"agreed\",\r\n            \"address\":\"201.81.113.174\",\r\n            \"email\":\"daniel.libanori@clicksign.com\",\r\n            \"signed_at\":\"2014-06-18T09:59:58.713-03:00\",\r\n            \"created_at\":\"2014-06-18T09:57:24.191-03:00\",\r\n            \"updated_at\":\"2014-06-18T09:59:58.836-03:00\"\r\n          },\r\n          {\r\n            \"display_name\":\"Daniel Gaboardi Libanori\",\r\n            \"title\":null,\r\n            \"company_name\":null,\r\n            \"key\":\"A0BF-848B-0A42-916C\",\r\n            \"act\":\"intervening\",\r\n            \"decision\":\"agreed\",\r\n            \"address\":\"201.81.113.174\",\r\n            \"email\":\"daniel.libanori@clicksign.com\",\r\n            \"signed_at\":\"2014-06-18T10:01:18.327-03:00\",\r\n            \"created_at\":\"2014-06-18T09:57:31.114-03:00\",\r\n            \"updated_at\":\"2014-06-18T10:01:18.389-03:00\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n]\r\n```\r\n\r\n## Resposta 4XX\r\n\r\nCaso o cliente utilize parâmetros inválidos, o corpo da resposta será um _JSON_ contendo uma mensagem de erro.\r\n\r\n* **Cabeçalhos**:\r\n  - **Content-Type:** application/json\r\n* **Corpo:**\r\n\r\n```json\r\n{ \"message\": \"Invalid parameters.\" }\r\n```\r\n\r\n## Resposta 5XX\r\n\r\nCaso ocorra qualquer tipo de falha no servidor, o corpo da resposta será um _JSON_ contendo uma mensagem de erro.\r\n\r\n* **Cabeçalhos**:\r\n  - **Content-Type:** application/json\r\n* **Corpo:**\r\n\r\n```json\r\n{ \"message\": \"Server error.\" }\r\n```\r\n\r\n# <a name=\"visualizacao-de-documento\"></a>Visualização de documentos\r\n\r\nCaso seja necessário obter detalhes sobre um documento em específico, existe um endpoint onde é possível\r\nobter essas informações. A visualização de um documento funciona de forma\r\nsemelhante as demais chamadas da api, sendo necessário apenas passar a **key**\r\ndo documento.\r\n\r\n* **Method:** GET\r\n* **Path:** /v1/documents/:key\r\n  - **Accept**: application/json\r\n\r\n## Exemplo de resposta\r\n\r\n```http\r\nHTTP/1.1 200 OK\r\nContent-Type:application/json\r\nConnection: Keep-Alive\r\n```\r\n\r\n```json\r\n{\r\n  \"document\": {\r\n    \"key\": \"1123-4567-89ab-cdef\",\r\n    original_name: \"document-2.pdf\"\r\n    \"status\": \"completed\",\r\n    \"archive_id\": 2,\r\n    \"created_at\": \"2014-06-18T09:55:16.873-03:00\",\r\n    \"updated_at\": \"2014-06-18T10:02:03.056-03:00\",\r\n    \"user_key\":\"A0BF-848B-0A42-916C\",\r\n    \"list\": {\r\n      \"locked\":null,\r\n      \"started_at\":null,\r\n      \"created_at\":\"2014-06-18T09:57:14.434-03:00\",\r\n      \"updated_at\":\"2014-06-18T09:57:14.434-03:00\",\r\n      \"user_key\":\"A0BF-848B-0A42-916C\",\r\n      \"signatures\": []\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Resposta 4XX\r\n\r\nCaso o cliente utilize parâmetros inválidos, o corpo da resposta será um _JSON_ contendo uma mensagem de erro.\r\n\r\n* **Cabeçalhos**:\r\n  - **Content-Type:** application/json\r\n* **Corpo:**\r\n\r\n```json\r\n{ \"message\": \"Invalid parameters.\" }\r\n```\r\n\r\n## Resposta 5XX\r\n\r\nCaso ocorra qualquer tipo de falha no servidor, o corpo da resposta será um _JSON_ contendo uma mensagem de erro.\r\n\r\n* **Cabeçalhos**:\r\n  - **Content-Type:** application/json\r\n* **Corpo:**\r\n\r\n```json\r\n{ \"message\": \"Server error.\" }\r\n```\r\n\r\n# <a name=\"upload-de-documentos\"></a>Upload de documentos\r\n\r\nO processo de envio de um documento para a Clicksign contempla a criação de um arquivo de **log** contendo informações de _upload_, usuário, etc, anexado a uma cópia do documento \"carimbada\" com um **número de série**. Ao final do processo haverá 2 arquivos na Clicksign: documento original e arquivo de log. Enquanto o arquivo é processado a requisição *não fica bloqueada*. O _status_ do documento será _working_ enquanto o processo ocorre. Após concluído, o _status_ será _open_.\r\n\r\nO nome do parâmetro do documento a ser enviado é **document[archive][original]**. O parâmetro geralmente vai dentro do corpo (_payload_) devido a requisição ser _multipart_.\r\n\r\n* **Method:** POST\r\n* **Path:** /v1/documents\r\n  - **Accept**: application/json\r\n  - **Content-Type:** multipart/form-data; boundary=----WebKitFormBoundaryjm7rLhiPSO6cEjWs\r\n* **Corpo:**\r\n  ```\r\n  ------WebKitFormBoundaryjm7rLhiPSO6cEjWs\r\n  Content-Disposition: form-data; name=\"document[archive][original]\"; filename=\"06pages.pdf\"\r\n  Content-Type: application/pdf\r\n\r\n  ------WebKitFormBoundaryjm7rLhiPSO6cEjWs--\r\n  ```\r\n\r\n\r\n## Exemplo de resposta\r\n\r\n```http\r\nHTTP/1.1 200 OK\r\nContent-Type:application/json\r\nConnection: Keep-Alive\r\n```\r\n\r\n```json\r\n{\r\n  \"key\": \"0123-4567-89ab-cdef\",\r\n  \"status\": \"working\"\r\n}\r\n```\r\n\r\n## Resposta 4XX\r\n\r\nCaso o cliente utilize parâmetros inválidos, o corpo da resposta será um _JSON_ contendo uma mensagem de erro.\r\n\r\n* **Cabeçalhos**:\r\n  - **Content-Type:** application/json\r\n* **Corpo:**\r\n\r\n```json\r\n{ \"message\": \"Invalid parameters.\" }\r\n```\r\n\r\n## Resposta 5XX\r\n\r\nCaso ocorra qualquer tipo de falha no servidor, o corpo da resposta será um _JSON_ contendo uma mensagem de erro.\r\n\r\n* **Cabeçalhos**:\r\n  - **Content-Type:** application/json\r\n* **Corpo:**\r\n\r\n```json\r\n{ \"message\": \"Server error.\" }\r\n```\r\n\r\n\r\n# <a name=\"criacao-de-lista-de-assinatura\"></a>Criação de lista de assinatura\r\n\r\nÉ possível criar uma lista de assinatura e enviá-la a outras pessoas em uma única ação. Para isso, é necessário que estejam presentes os campos que especificam o documento, os signatários, a mensagem e opcionalmente se deseja enviar e-mail para os signatários ou não.\r\n\r\n* **Method:** POST\r\n* **Path:** /v1/documents/:key/list\r\n* **Cabeçalhos:**\r\n  - **Content-Type:** application/json\r\n  - **Accept**: application/json\r\n* **Corpo:**\r\n\r\n  ```json\r\n  {\r\n    \"signers\": [\r\n      { \"email\": \"foo@example.com\", \"act\": \"sign\" },\r\n      { \"email\": \"bar@example.com\", \"act\": \"witness\" }\r\n    ],\r\n\r\n    \"message\": \"Hi guys, please sign this document.\",\r\n    \"skip_email\": false\r\n  }\r\n  ```\r\n\r\nPara criar uma lista de assinatura, adicionar signatários ao documento e iniciar o processo de assinatura automaticamente, deve-se adicionar um campo `signers` ao JSON. Caso não haja o campo `signers` ou ele seja `null`, o documento não possuirá lista de assinatura definida.\r\n\r\nO campo `signers` deverá ser um `Array` contendo os signatários. Cada signatário é especificado através de e-mail e ação, sendo os respectivos campos `email` e `act`.\r\n\r\nOs possíveis valores de `act` são:\r\n- sign\r\n- approve\r\n- acknowledge\r\n- witness\r\n- intervenient\r\n- party\r\n- receipt\r\n\r\nA mensagem a ser enviada aos signatários é definida pelo campo `message`.\r\n\r\nAlém disso também é possível especificar se deseja ao iniciar a lista de assinatura que seja enviado um e-mail para os signatários ou não, isso é feito através do parametro `skip_email` que recebe um boolean.\r\n\r\nOs possíveis valores de `skip_email` são:\r\n- false (padrão)\r\n- true\r\n\r\nCaso o parametro seja passado como **true** ao criar a lista de assinatura não será enviado nenhum e-mail para os signatários. É importante notar\r\nque caso seja fornecido o parametro `skip_email` como *true*, o parametro `message` se torna desnecessário dado que não será enviado nenhum e-mail. Também\r\né importante observar que como o valor padrão desse parametro é `false` ele pode ser omitido do json que é enviado para o servidor caso você deseje enviar os e-mails normalmente.\r\n\r\n\r\n# <a name=\"hooks\"></a>Hooks\r\n\r\nÉ possível que a Clicksign notifique outras aplições à respeito da alteração de estado de um determinado documento. O estado de um documento é alterado quando um dos seguintes eventos ocorrem:\r\n\r\n- o documento é processado\r\n- alguém se recusa a assinar o documento\r\n- o documento é completamente assinado\r\n\r\nPara isso, a Clicksign dispõe de um sistema de **hooks** que realizam chamadas HTTP para outras aplicações. As _hooks_ são definidas por documento, portanto cada documento deve configurar as _hooks_ com os parâmetros que deseja.\r\n\r\nQuando o documento alterar o seu estado, a Clicksign irá realizar um POST para a `url` que foi configurada na _hook_ do documento. No corpo da requisição irá em anexo a chave do documento em formato JSON. Portanto você pode determinar para cada documento um endereço específico a ser notificado ou colocar em todos os documentos o mesmo endereço a ser notificado e o servidor que atender a requisição inspecionar o JSON e determinar o que fazer com cada documento em particular.\r\n\r\n- **URL**: caminho completo, incluíndo protocolo\r\n- **Content-Type**: application/json\r\n\r\n## Configuração de hooks\r\n\r\nCadastra um _hook_ para um determinado usuário.\r\n\r\n* **Method:** POST\r\n* **Path:** /v1/documents/:key/hooks\r\n* **Corpo:**\r\n  ```json\r\n  {\r\n    \"url\": \"https://example.com/signed/123\",\r\n  }\r\n  ```\r\n\r\n## Resposta 200\r\n\r\nCaso não ocorra nenhuma falha na requisição, a resposta será status 200 e seu corpo será um JSON contendo os dados da _hook_ recém criada.\r\n\r\n```http\r\nHTTP/1.1 200 OK\r\nContent-Type:application/json\r\n```\r\n\r\n```json\r\n{\r\n  \"id\":1,\r\n  \"url\":\"http://example.com\",\r\n  \"document_id\": 1,\r\n  \"created_at\":\"2014-07-08T12:35:55.777-03:00\",\r\n  \"updated_at\":\"2014-07-08T12:35:55.777-03:00\"\r\n}\r\n```\r\n\r\n## Resposta 4XX\r\n\r\nCaso o cliente utilize parâmetros inválidos, o corpo da resposta será um _JSON_ contendo uma mensagem de erro.\r\n\r\n* **Cabeçalhos**:\r\n  - **Content-Type:** application/json\r\n* **Corpo:**\r\n\r\n  ```json\r\n  {\r\n    \"message\": \"Parâmetros inválidos.\"\r\n  }\r\n  ```\r\n\r\n## Resposta 5XX\r\n\r\nCaso ocorra qualquer tipo de falha no servidor, o corpo da resposta será um _JSON_ contendo uma mensagem de erro.\r\n\r\n* **Cabeçalhos**:\r\n  - **Content-Type:** application/json\r\n* **Corpo:**\r\n\r\n  ```json\r\n  {\r\n    \"message\": \"Server error.\"\r\n  }\r\n  ```\r\n\r\n# <a name=\"exemplos\"></a>Exemplos\r\n\r\nOs exemplos abaixo podem ser executados direto da linha de comando utilizando o cURL.\r\n\r\n```bash\r\nexport DOMAIN=api.clicksign.com\r\nexport TOKEN=put-your-token-here\r\nexport DOCUMENT=/home/joe/document-de-exemplo.pdf\r\n\r\n# Obter os documentos de uma determinada conta\r\ncurl -X GET -H \"Accept: application/json\" https://$DOMAIN/v1/documents/?access_token=$TOKEN\r\n\r\n# Realizar upload de um documento\r\ncurl -X POST -H \"Accept: application/json\" -F \"document[archive][original]=@$DOCUMENT\" https://$DOMAIN/v1/documents?access_token=$TOKEN\r\n\r\nexport KEY=ver-key-retornada-no-JSON\r\n\r\n# Criar uma lista de assinatura\r\ncurl -X POST -H \"Accept: application/json\" -H \"Content-type: application/json\" -d '{\"signers\": [{ \"email\": \"joe@example.com\", \"act\": \"sign\" }]}' https://$DOMAIN/v1/documents/$KEY/list?access_token=$TOKEN\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}