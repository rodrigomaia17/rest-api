{"name":"Rest API V2","tagline":"Rest API V2","body":"# Índice\r\n\r\n- [Introdução](#introducao)\r\n- [Funcionamento geral](#funcionamento-geral)\r\n- [Autenticação](#autenticacao)\r\n- [Upload de documentos](#upload-de-documentos)\r\n- [Criação de lista de assinatura](#criacao-de-lista-de-assinatura)\r\n- [Download de um documento](#download-de-um-documento)\r\n- [Criação de usuários corporativos](#criacao-de-usuarios-corporativos)\r\n- [Hooks](#hooks)\r\n\r\n# <a name=\"introducao\"></a>Introdução\r\n\r\nA Clicksign é uma solução online para enviar, guardar e assinar documentos, com validade jurídica. Foi criada para facilitar, reduzir custo e aumentar a segurança e compliance do processo de assinatura e _workflow_ de documentos. \r\n\r\nA Clicksign pode ser acessada em https://desk.clicksign.com. \r\n\r\nO propósito desta **REST API** é prover meios para que nossos clientes adequem a Clicksign aos seus processos e sistemas p. ex. automatizar tarefas, desenhar fluxos de assinatura, e definir _workflow_. \r\n\r\nQualquer linguagem de programação compativel com requisições **HTTP / JSON** cumpre os requisitos necessários para consumir os serviços desta API. Assim, com pouco esforço de programação é possível integrar desde scripts shell até sistemas de ERP.\r\n\r\n# <a name=\"funcionamento-geral\"></a>Funcionamento geral\r\n\r\nUma _REST API_ é composta, basicamente, por dois elementos: um **cliente** e um **servidor**. O cliente sempre inicia a comunicação mediante requisição HTTP. O servidor sempre finaliza a comunicação respondendo à requisição.\r\n\r\n<p align=\"center\">\r\n  <img src=\"https://raw.github.com/clicksign/rest-api-v2/master/images/client-server.png\" />\r\n</p>\r\n\r\nAs mensagens HTTP são compostas por uma linha inicial, um conjunto de cabeçalhos e um corpo. A linha inicial difere nas requisições e nas respostas, o cabeçalho compartilha parâmetros em comum e parâmetros específicos, e o corpo é completamente dependente de cada mensagem, podendo até ser nulo.\r\n\r\nA requisição, em sua linha inicial, indica o **método**, o **caminho**, e a **versão do protocolo**. O método e o caminho são essenciais em uma _REST API_ uma vez que ambos indicam a ação a ser executada no servidor.\r\n\r\nA resposta, em sua linha inicial, indica a **versão do protocolo**, o **status**, e contém uma **mensagem informativa**. O código de status é essencial para o cliente saber se a ação foi devidamente executada no servidor.\r\n\r\nA documentação de cada função da API determina o método e o caminho a ser utilizado, e o significado do corpo e de cada status da resposta.\r\n\r\n**Atenção:** Toda a comunição cliente/servidor é feita através de HTTP sobre SSL/TLS (HTTPS). Requisições em HTTP simples resultam em redirecionamentos (304) para o protocolo HTTPS.\r\n\r\nTodas as requisições da _REST API_ são feitas para `api.clicksign.com`.\r\n\r\n## Exemplo de requisição\r\n\r\n```http\r\nGET /documents HTTPS/1.1\r\nHost: api.clicksign.com\r\nAccept: application/json\r\n```\r\n\r\n- Método: GET\r\n- Caminho: /documents\r\n- Versão: 1.1\r\n- Cabeçalhos: Host, Accept\r\n- Corpo: vazio\r\n\r\n## Exemplo de resposta\r\n\r\n```http\r\nHTTP/1.1 200 OK\r\nContent-Type:application/json\r\nConnection: Keep-Alive\r\n```\r\n\r\n```json\r\n[\r\n  {\r\n    \"id\": \"abcd...\"\r\n  },\r\n\r\n  {\r\n    \"id\": \"...\"\r\n  }\r\n]\r\n```\r\n\r\n- Versão: 1.1\r\n- Status: 200\r\n- Mensagem: OK\r\n- Cabeçalhos: Content-Type, Connection\r\n- Corpo: [{...\r\n\r\n# <a name=\"autenticacao\"></a>Autenticação\r\n\r\nA Clicksign utiliza duplo fator de autenticação para aumentar a segurança de suas transações. Autenticações que utilizam duplo fator geralmente são baseadas em algo que o cliente _conhece_ e algo que o cliente _possui_. No caso da API os fatores são:\r\n\r\n1. Conhecer um par **identificação** e **segredo**\r\n1. Possuir um endereço **IP** específico\r\n\r\nO primeior fator da autenticação é feito através de 2 parâmetros: **api_id** e **api_secret**. O parâmetro `api_id` define qual cliente está fazendo a requisição. O parâmetro `api_secret` define o senha que será utilizada na verificação de acesso à API. Ambos os parâmetros devem ser enviados no **caminho** da requisição. Portanto, toda requisição deverá conter no _path_ `?api_id=string-da-key&api_secret=string-do-secret`.\r\n\r\n**Atenção:** Os parâmetros de autenticação devem ser enviados a cada requisição feita pelo cliente. Como esses parâmetros são comuns a todos as funções da API, eles serão omitidos das documentações.\r\n\r\nO segundo fator da autenticação é realizado automaticamente pelo servidor da Clicksign, que verifica se o **IP** de origem da requisição está dentro de uma lista de endereços previamente cadastrados para determinado cliente.\r\n\r\n\r\n# <a name=\"upload-de-documentos\"></a>Upload de documentos\r\n\r\nO processo de envio de um documento para a Clicksign contempla a criação de um arquivo de **log** contendo informações de _upload_, usuário, etc, anexado a uma cópia do documento \"carimbada\" com um **número de série**. Ao final do processo haverá 2 arquivos na Clicksign: documento original e arquivo de log. Enquanto o arquivo é processado a requisição *não fica bloqueada*. O _status_ do documento será _working_ enquanto o processo ocorre. Após concluído, o _status_ será _open_.\r\n\r\n* **Method:** POST\r\n* **Path:** /documents\r\n  - **Content-Type:** multipart/mixed; boundary=frontier\r\n  - **Accept**: application/json\r\n* **Corpo:**\r\n  - **Content-Type:** application/octet-stream\r\n  - **Content-Transfer-Encoding:** base64\r\n\r\n  ```\r\n  --frontier--\r\n  PGh0bWw+CiAgPGhlYWQ+CiAgPC9oZWFkPgogIDxib2R5PgogICAgPHA+VGhpcyBpcyB0aGUg\r\n  Ym9keSBvZiB0aGUgbWVzc2FnZS48L3A+CiAgPC9ib2R5Pgo8L2h0bWw+Cg==\r\n  --frontier--\r\n  ```\r\n\r\n## Exemplo de resposta\r\n\r\n```http\r\nHTTP/1.1 200 OK\r\nContent-Type:application/json\r\nConnection: Keep-Alive\r\n```\r\n\r\n```json\r\n{\r\n  \"key\": \"0123-4567-89ab-cdef\",\r\n  \"status\": \"working\"\r\n}\r\n```\r\n\r\n## Resposta 4XX\r\n\r\nCaso o cliente utilize parâmetros inválidos, o corpo da resposta será um _JSON_ contendo uma mensagem de erro.\r\n\r\n* **Cabeçalhos**:\r\n  - **Content-Type:** application/json\r\n* **Corpo:**\r\n\r\n```json\r\n{ \"message\": \"Invalid parameters.\" }\r\n```\r\n\r\n## Resposta 5XX\r\n\r\nCaso ocorra qualquer tipo de falha no servidor, o corpo da resposta será um _JSON_ contendo uma mensagem de erro.\r\n\r\n* **Cabeçalhos**:\r\n  - **Content-Type:** application/json\r\n* **Corpo:**\r\n\r\n```json\r\n{ \"message\": \"Server error.\" }\r\n```\r\n\r\n\r\n# <a name=\"criacao-de-lista-de-assinatura\"></a>Criação de lista de assinatura\r\n\r\nÉ possível criar uma lista de assinatura e enviá-la a outras pessoas em uma única ação. Para isso, é necessário que estejam presentes os campos que especificam o documento, os signatários, e a mensagem.\r\n\r\n* **Method:** POST\r\n* **Path:** /documents/:key/list\r\n* **Cabeçalhos:**\r\n  - **Content-Type:** application/json\r\n  - **Accept**: application/json\r\n* **Corpo:**\r\n\r\n  ```json\r\n  {\r\n    \"signers\": [\r\n      { \"email\": \"foo@example.com\", \"action\": \"sign\" },\r\n      { \"email\": \"bar@example.com\", \"action\": \"sign_as_witness\" }\r\n    ],\r\n\r\n    \"message\": {\r\n      \"recipients\": [ \"foo@example.com\", \"bar@example.com\" ],\r\n      \"body\": \"Hi guys, please sign this document.\"\r\n    }\r\n  }\r\n  ```\r\n\r\n## Especificando signatários\r\n\r\nPara criar uma lista de assinatura, adicionar signatários ao documento e iniciar o processo de assinatura automaticamente, deve-se adicionar um campo `signers` ao JSON. Caso não haja o campo `signers` ou ele seja `null`, o documento não possuirá lista de assinatura definida.\r\n\r\nO campo `signers` deverá ser um `Array` contendo os signatários. Cada signatário é especificado através de e-mail e ação, sendo os respectivos campos `email` e `action`.\r\n\r\nOs possíveis campos de `action` são:\r\n- sign\r\n- approve\r\n- sign_as_party\r\n- sign_as_witness\r\n- sign_as_intervenient\r\n\r\n```json\r\n{\r\n  \"signers\": [\r\n    { \"email\": \"foo@example.com\", \"action\": \"sign\" },\r\n    { \"email\": \"bar@example.com\", \"action\": \"sign_as_witness\" }\r\n  ]\r\n}\r\n```\r\n\r\n## Especificando a mensagem\r\n\r\nPara especificar a mensagem a ser enviada são necessários dois campos: `recipients` e `body`.\r\n\r\nO campo `recipients` é um `Array` obrigatório com tamanho mínimo de `1`. Nenhuma mensagem será enviada caso o campo `recipients` não exista, seja `null` ou tenha tamanho igual a `0`.\r\n\r\nO campo `body` especifica o corpo da mensagem, é opcional e caso presente deve ser do tipo `String`.\r\n\r\n```json\r\n{\r\n  \"message\": {\r\n    \"recipients\": [ \"foo@example.com\", \"bar@example.com\" ],\r\n    \"body\": \"Hi guys, please sign this document.\"\r\n  }\r\n}\r\n```\r\n\r\n\r\n# <a name=\"download-de-um-documento\"></a>Download de um documento\r\n\r\nRetorna um arquivo _ZIP_ contendo os 2 arquivos resultantes do processamento: arquivo original, log concatenado a uma cópia carimbada do arquivo.\r\n\r\n* **Method:** GET\r\n* **Path:** /documents/:key\r\n* **Cabeçalhos:**\r\n  - **Accept**: application/zip\r\n* **Corpo:** _vazio_\r\n\r\n## Resposta 200\r\n\r\nCaso não ocorra nenhuma falha na requisição, o corpo da resposta será o arquivo _ZIP_.\r\n\r\n* **Cabeçalhos**:\r\n  - **Content-Type:** application/zip\r\n* **Corpo:**\r\n\r\n  ```\r\n  PGh0bWw+CiAgPGhlYWQ+CiAgPC9oZWFkPgogIDxib2R5PgogICAgPHA+VGhpcyBpcyB0aGUg\r\n  ...\r\n  Ym9keSBvZiB0aGUgbWVzc2FnZS48L3A+CiAgPC9ib2R5Pgo8L2h0bWw+Cg==\r\n  ```\r\n\r\n## Resposta 4XX\r\n\r\nCaso o cliente utilize parâmetros inválidos, o corpo da resposta será um _JSON_ contendo uma mensagem de erro.\r\n\r\n* **Cabeçalhos**:\r\n  - **Content-Type:** application/json\r\n* **Corpo:**\r\n\r\n  ```json\r\n  {\r\n    \"message\": \"Parâmetros inválidos.\"\r\n  }\r\n  ```\r\n\r\n## Resposta 5XX\r\n\r\nCaso ocorra qualquer tipo de falha no servidor, o corpo da resposta será um _JSON_ contendo uma mensagem de erro.\r\n\r\n* **Cabeçalhos**:\r\n  - **Content-Type:** application/json\r\n* **Corpo:**\r\n\r\n  ```json\r\n  {\r\n    \"message\": \"Server error.\"\r\n  }\r\n  ```\r\n\r\n\r\n# <a name=\"criacao-de-usuarios-corporativos\"></a>Criação de usuários corporativos\r\n\r\n* **Method:** POST\r\n* **Path:** /registration\r\n* **Cabeçalhos:**\r\n  - **Content-Type:** application/json\r\n  - **Accept**: application/json\r\n* **Corpo:**\r\n  ```json\r\n  {\r\n    \"person\": {\r\n      \"name\": {\r\n        \"given_name\": \"John\",\r\n        \"additional_name\": \"August\",\r\n        \"family_name\": \"Doe\",\r\n        \"honorific_suffix\": \"III\"\r\n      },\r\n\r\n      \"documentation\": {\r\n        \"country\": \"br\",\r\n        \"kind\": \"cpf\",\r\n        \"value\": \"999.999.999-99\"\r\n      },\r\n\r\n      \"phone\": {\r\n        \"country\": \"br\",\r\n        \"number\": \"99-9-9999-9999\"\r\n      }\r\n    }\r\n  }\r\n  ```\r\n\r\nPara especificar a criação de um usuário corporativo a requisição json deve seguir o formato especificado acima.\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Campo</th>\r\n      <th>Tipo</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>person.name.given_name</td>\r\n      <td>String com até 50 caracteres</td>\r\n    </tr>\r\n\r\n    <tr>\r\n      <td>person.name.additional_name</td>\r\n      <td>String com até 50 caracteres</td>\r\n    </tr>\r\n\r\n    <tr>\r\n      <td>person.name.family_name</td>\r\n      <td>String com até 50 caracteres. A quantidade total de sobrenomes (additional_name + family_name + honorific_suffix, separados por espaço) não deve ultrapassar a quantidade de <b>6 nomes</b></td>\r\n    </tr>\r\n\r\n    <tr>\r\n      <td>person.name.honorific_suffix</td>\r\n      <td>String com até 50 caracteres</td>\r\n    </tr>\r\n\r\n    <tr>\r\n      <td>person.documentation.country</td>\r\n      <td>\"br\"</td>\r\n    </tr>\r\n\r\n    <tr>\r\n      <td>person.documentation.kind</td>\r\n      <td>\"cpf\"</td>\r\n    </tr>\r\n\r\n    <tr>\r\n      <td>person.documentation.value</td>\r\n      <td>String com 11 digítos com ou sem pontuação, exemplos válidos: \"99999999999\", \"999.999.999-99\"</td>\r\n    </tr>\r\n\r\n    <tr>\r\n      <td>person.phone.country</td>\r\n      <td>\"br\"</td>\r\n    </tr>\r\n\r\n    <tr>\r\n      <td>person.phone.number</td>\r\n      <td>String com 10 ou 11 digítos com ou sem pontuação, onde os dois primeiros representam o **ddd** e os últimos 8 ou 9 digítos representam ou número celular</td, exemplos válidos: \"99-9999-9999\", \"99-9-9999-9999\", \"99999999999\", \"9999999999\"</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n\r\n## Resposta 200\r\n\r\nCaso não ocorra nenhuma falha na requisição, o corpo da resposta será um _JSON_ contendo as informações do cadastro de um usuário corporativo.\r\n\r\n* **Cabeçalhos**:\r\n  - **Content-Type:** application/json\r\n* **Corpo:**\r\n\r\n  ```json\r\n  {\r\n    \"registration\": {\r\n      \"url\": \"https://desk.clicksign.com/registration?uuid=....\"\r\n    }\r\n  }\r\n  ```\r\n\r\n## Resposta 4XX\r\n\r\nCaso o cliente utilize parâmetros inválidos, o corpo da resposta será um _JSON_ contendo uma mensagem de erro.\r\n\r\n* **Cabeçalhos**:\r\n  - **Content-Type:** application/json\r\n* **Corpo:**\r\n\r\n  ```json\r\n  {\r\n    \"message\": \"Parâmetros inválidos.\"\r\n  }\r\n  ```\r\n\r\n## Resposta 5XX\r\n\r\nCaso ocorra qualquer tipo de falha no servidor, o corpo da resposta será um _JSON_ contendo uma mensagem de erro.\r\n\r\n* **Cabeçalhos**:\r\n  - **Content-Type:** application/json\r\n* **Corpo:**\r\n\r\n  ```json\r\n  {\r\n    \"message\": \"Server error.\"\r\n  }\r\n  ```\r\n\r\n\r\n# <a name=\"hooks\"></a>Hooks\r\n\r\nÉ possível que a Clicksign notifique outras aplições à respeito de determinados eventos, p. ex., documento completamente assinado.\r\n\r\nPara isso, a Clicksign dispõe de um sistema de **hooks** que realizam chamadas HTTP para outras aplicações. As _hooks_ são definidas por usuário, portanto cada usuário deve configurar as _hooks_ com os parâmetros que deseja.\r\n\r\nOs parâmetros possíveis são:\r\n\r\n- **URL**: caminho completo, incluíndo protocolo\r\n- **Método**: GET, POST, PUT, DELETE, PATCH\r\n- **Content-Type**: application/json\r\n\r\nÉ anexado ao corpo da requisição uma representação em _JSON_ do evento que a disparou, p. ex., em evento de documento completamente assinado é anexado um _JSON_ do documento, da lista de assinatura e das assinaturas do documento.\r\n\r\nOs tipos de _hooks_ implementados até o momento são:\r\n\r\n- documento pendente de assinatura\r\n- documento completamente assinado\r\n\r\n## Configuração de hooks\r\n\r\nCadastra um _hook_ para um determinado usuário.\r\n\r\n* **Method:** POST\r\n* **Path:** /users/:id/hooks\r\n* **Corpo:**\r\n  ```json\r\n  {\r\n    \"pending\": {\r\n      \"url\": \"https://example.com/signed/123\",\r\n      \"method\": \"POST\"\r\n    },\r\n\r\n    \"completed\": {\r\n      \"url\": \"https://example.com/completed/123\",\r\n      \"method\": \"POST\"\r\n    }\r\n  }\r\n  ```\r\n\r\n## Resposta 200\r\n\r\nCaso não ocorra nenhuma falha na requisição, a resposta será apenas o status 200 e seu corpo será vazio.\r\n\r\n## Resposta 4XX\r\n\r\nCaso o cliente utilize parâmetros inválidos, o corpo da resposta será um _JSON_ contendo uma mensagem de erro.\r\n\r\n* **Cabeçalhos**:\r\n  - **Content-Type:** application/json\r\n* **Corpo:**\r\n\r\n  ```json\r\n  {\r\n    \"message\": \"Parâmetros inválidos.\"\r\n  }\r\n  ```\r\n\r\n## Resposta 5XX\r\n\r\nCaso ocorra qualquer tipo de falha no servidor, o corpo da resposta será um _JSON_ contendo uma mensagem de erro.\r\n\r\n* **Cabeçalhos**:\r\n  - **Content-Type:** application/json\r\n* **Corpo:**\r\n\r\n  ```json\r\n  {\r\n    \"message\": \"Server error.\"\r\n  }\r\n  ```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}